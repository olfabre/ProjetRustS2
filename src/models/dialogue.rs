// Module de gestion des dialogues et interactions avec les PNJ
// Permet de g√©rer les conversations, les qu√™tes et le commerce avec les personnages non-joueurs

use std::collections::HashMap;
use serde::{Deserialize, Serialize};
use std::io::stdin;

use crate::models::entities::character::Character;
use crate::models::entities::item::Item;
use crate::models::entities::pnj::Pnj;
use crate::models::entities::quete::Quete;
use crate::models::tracker::Tracker;
use crate::models::traits::money_manager::MoneyManager;

// Structure repr√©sentant un dialogue complet avec un PNJ
// Contient un identifiant unique et une liste d'√©tapes de dialogue
// Chaque dialogue peut avoir plusieurs √©tapes qui s'encha√Ænent
#[derive(Debug, Serialize, Deserialize)]
pub struct Dialogue {
    pub dialogue_id: u32,        // Identifiant unique du dialogue
    pub dialogue_steps: Vec<DialogueStep>,  // Liste des √©tapes du dialogue
}

// Structure repr√©sentant une √©tape de dialogue
// Contient une action associ√©e, un √©tat actif/inactif, une question et des options de r√©ponse
// Les actions peuvent d√©clencher des √©v√©nements comme l'acceptation de qu√™tes
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct DialogueStep {
    pub action: String,     // Action √† effectuer (ex: "accepteQuete:42", "merchant")
    pub active: bool,       // Si l'√©tape est disponible ou non
    pub question: String,   // Question pos√©e par le PNJ
    pub options: Vec<DialogueOption>,  // R√©ponses possibles du joueur
}

// Structure repr√©sentant une option de r√©ponse dans un dialogue
// Contient la r√©ponse du joueur et la r√©action du PNJ
// Les r√©ponses peuvent d√©clencher des actions sp√©cifiques
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct DialogueOption {
    pub r√©ponse: String,    // Texte de la r√©ponse du joueur
    pub r√©action: String,   // R√©action du PNJ √† cette r√©ponse
}

impl Dialogue {
    // Affiche et g√®re un dialogue complet avec un PNJ
    // Permet au joueur de choisir des r√©ponses et d√©clenche les actions associ√©es
    // G√®re les qu√™tes, le commerce et les interactions sp√©ciales
    pub fn afficher_dialogue(&mut self, character: &mut Character,
                             quetes: &mut HashMap<u32,Quete>, items: &Vec<Item>, pnj: &mut Pnj) {
        if self.dialogue_steps.is_empty() {
            println!("Ce PNJ n'a rien √† dire.");
        } else {

            let mut current_index = 0; // Start at the first dialogue step

            while current_index < self.dialogue_steps.len() {

                // This is a reference, because step is going to be changed
                let step = &self.dialogue_steps[current_index];

                // Instead of holding the mutable reference, extract needed values early

                let options = self.dialogue_steps[current_index].options.clone();
                let action = self.dialogue_steps[current_index].action.clone();

                // Si un step est inactive, on le saute
                if !step.active {
                    current_index += 1;
                    continue; // üîÑ Passer √† la prochaine question
                }

                println!("current index: ================> {}", current_index);
                println!("üí¨ PNJ : \"{}\"", step.question);

                for (i, option) in options.iter().enumerate() {
                    println!("{}. {}", i + 1, option.r√©ponse);
                }

                println!("‚û° Tape le num√©ro de ton choix :");
                let mut choix = String::new();
                stdin().read_line(&mut choix).expect("Erreur de lecture");

                if let Ok(index) = choix.trim().parse::<usize>() {
                    if index > 0 && index <= step.options.len() {
                        let selected_option = &options[index - 1];

                        // Afficher la r√©action
                        println!("üí¨ PNJ : \"{}\"", selected_option.r√©action);

                        // üõ†Ô∏è V√©rifier si l'action commence par "accepteQuete"
                        if action.starts_with("accepteQuete") && selected_option.r√©ponse == "Accepter Qu√™te" {
                            // Extraire l'ID de la qu√™te (si format "accepteQuete:42")
                            if let Some(id_str) = action.split(':').nth(1) {
                                if let Ok(id) = id_str.parse::<u32>() {

                                    character.ajouter_quete(id);
                                    // let  quete = quetes.get(&id).unwrap();
                                    println!("üéØ Qu√™te ajout√©e : {}!", quetes.get(&id).unwrap().name());

                                    // Quand la quete est accept√©e, le dialogue pour l'offrir disparait
                                    self.dialogue_steps[current_index].active = false;
                                }
                            }
                        }

                        // Verifier si action  == rendreQuete
                        // Verifier si reponse == Completer Quete
                         if action.starts_with("rendreQuete") && selected_option.r√©ponse == "Completer Qu√™te" {
                             // Split string a get the part after :
                             if let Some(id_str) = action.split(':').nth(1) {
                                 // parse string into u32
                                 if let Ok(id) = id_str.parse::<u32>() {
                                     // retrieve mut quete from Map
                                     let  quete = quetes.get(&id).unwrap();
                                     // Character supprimer quete
                                     character.supprimer_quete(id);
                                     character.add_experience(quete.experience);

                                     // On r√©cup√®re l'objet depuis la liste globale
                                     for recompense_item in quete.recompense_items.iter() {
                                         if let Some(item) = items.iter().find(|item| item.id() == *recompense_item) {
                                             // On l'ajoute √† l'inventaire du personnage
                                             character.inventory_mut().add_item(item.id(), 1);
                                             println!("üëú Tu as ramass√© '{}'.", item.name());
                                         }
                                     }

                                     if quete.recompense_argent > 0 {
                                         println!("ü™ô Tu as gagn√© {} pi√®ces d'money.", quete.recompense_argent);
                                         character.add_money(quete.recompense_argent);
                                     }
                                 }
                             }
                         }

                        if action.starts_with("merchant") && selected_option.r√©ponse == "Commerce" {
                            self.start_merchant(character, items, pnj);
                        }

                        // Sortir de la boucle t√¥t
                        if selected_option.r√©ponse.starts_with("Au revoir") ||
                            selected_option.r√©ponse.starts_with("Ignorer") ||
                            selected_option.r√©ponse.starts_with("Refuser") {
                            break;
                        }

                        // Le but c'est montrer tous les steps qui sont actives
                        current_index += 1; // ‚úÖ Mettre √† jour l'index

                    } else {
                        println!("‚ùå Choix invalide !");
                    }
                } else {
                    println!("‚ùå Entr√©e invalide !");
                }
            }
        }
    }

    // D√©marre l'interface de commerce avec un marchand
    // Permet au joueur d'acheter et vendre des objets
    // G√®re l'argent et l'inventaire du joueur et du marchand
    pub fn start_merchant(&mut self, character: &mut Character, items: &Vec<Item>, pnj: &mut Pnj) {
        loop {
            println!("\nüë§ {} (ü™ô {})", character.name(), character.money);
            println!("üõí Marchand (ü™ô {}) : \"Voici mes merchandises.\"", pnj.money);
            let mut merchant_items = pnj.inventory_mut();

            for (i, inventory_item) in merchant_items.items.iter().enumerate() {
                let id = inventory_item.item_id;
                if let Some(item) = items.iter().find(|i| i.id() == id) {
                    println!("{}. {} - ü™ô {} - Qt: {}", i + 1, item.name(), item.value, inventory_item.quantity) ;
                } else {
                    println!("{}. Objet inconnu (ID: {})", i + 1, id);
                }


            }
            println!("vendre <objet>  (dans votre inventaire)");
            println!("quitter");
            println!("\n‚û° Tapez le num√©ro de l'objet √† acheter, ou autre choix :");

            let mut choix = String::new();
            stdin().read_line(&mut choix).expect("Erreur de lecture");

            if choix.trim().eq_ignore_ascii_case("quitter") {
                println!("üëã Bon Affaire");
                break; // Quit merchant loop
            }

            if let Ok(index) = choix.trim().parse::<usize>() {
                if index > 0 && index <= merchant_items.items.len() {
                    let inventory_item = &merchant_items.items[index - 1];
                    let Some(item) = items.iter().find(|i| i.id() == inventory_item.item_id)
                        else { todo!() };
                    if character.money >= item.value {
                        character.inventory_mut().add_item(item.id(), 1);
                        character.remove_money(item.value);
                        pnj.inventory_mut().remove_item(item.id(), 1);
                        pnj.add_money(item.value);

                        println!("ü™ô Tu as achet√© '{}'.", item.name());
                    } else {
                        println!("‚ùå Pas assez d'argent !");
                    }
                } else {
                    println!("‚ùå Choix invalide !");
                }
            } else if choix.starts_with("vendre ") {
                let objet_nom = &choix[9..].trim();
                if let Some(item) = items.iter().find(|i| {
                    i.name().eq_ignore_ascii_case(objet_nom) &&
                        character.inventory_mut().items.iter().any(|(inv)| inv.item_id == i.id())
                }) {

                    if pnj.money >= item.value {
                        character.inventory_mut().remove_item(item.id(), 1);
                        character.add_money(item.value);
                        pnj.inventory_mut().add_item(item.id(), 1);
                        pnj.remove_money(item.value);
                        println!("ü™ô Tu as vendu '{}'.", item.name());
                    } else {
                        println!("‚ùå Tu n'as pas cet objet dans ton inventaire !");
                    }
                } else {
                    println!("‚ùå Objet non trouv√© dans ton inventaire !");
                }

            } else {
                println!("‚ùå Entr√©e invalide !");
            }
        }
    }

}

